/* Globals */

var PlaylistQueue   = [];	    /* List of songs	*/
var PlaylistIndex   = -1;	    /* Current song	*/
var CurrentNotebook = 'Search';	    /* Current notebook */

/* AJAX functions */

function requestJSON(url, callback) {
    var request = new XMLHttpRequest();
    request.onreadystatechange = function() {
    	if (request.readyState == 4 && request.status == 200) {
    	    callback(JSON.parse(request.responseText));
	}
    }

    request.open('GET', url, true);
    request.send();
}

/* Display functions */

function displayTab() {

    /* TODO: Remove the active class from each notebook tab */
    tabs=document.getElementsByClassName("nav-tabs")[0];
    tags=tabs.getElementsByTagName("li");
    for (i=0; i<tags.length; i++) {
       tags[i].classList.remove("active");
    }

    /* TODO: Add active class to current object */
    this.classList.add("active");

    /* TODO: Check current object's id and call the appropriate display function */
    current=this.id;
    if (current=="search") {
        displaySearch();
    }
    else if (current=="artists") {
        displayArtist();
    }
    else if (current=="albums") {
        displayAlbum();
    }
    else if (current=="tracks") {
        displayTrack();
    }
    else if (current=="playlist") {
        displayPlaylist();
    }

}

function displayResults(url) {
    /* TODO: Request JSON from URL and then call appropriate render function */
    
    requestJSON(url, function(data) {
        if (data['render']=='gallery') {
           renderGallery(data['results'], data['prefix']);
	}
	else if (data['render']=='album') {
	   renderAlbum(data['results']);
	}
	else if (data['render']=='track') {
	   renderTrack(data['results']);
	}
    });

}

function displaySearch(query) {
    /* TODO: Set CurrentNotebook */
    CurrentNotebook = "Search";    
    /* TODO: Set notebook-body-nav's innerHTML to display search form */
    var h = document.getElementById("notebook-body-nav")
    
    k = '<form class="navbar-form text-center">';

    /* TODO: Call updateSearchResults */
    k += '<div class="formgroup">'
    k += '<label class="control=lab sr-only">Title</label>'
    k += '<input id="query" type="text" name="query" class="form-control" placeholder="What to search for" onkeyup="updateSearchResults()">'
    k+='</div><div class="form-group">'
    k+='<select id="table" name="table" class="form-control" onchange="updateSearchResults()">'
    k += '<option value="Artists">Artists</option>'
    k+= '<option balue="Albums">Albums</option>'
    k+= '<option value="Tracks">Tracks</option>'
    k+= "</select></div></form>"

    h.innerHTML = k
    updateSearchResults()

}

function displayArtist(artist) {
    /* TODO: Set CurrentNotebook */
    CurrentNotebook= "Artists"

    /* TODO: Set notebook-body-nav's innerHTML to empty string or some other useful information */

    if (artist===undefined) {
        artist="";
    }
    //void 0 === artist && (artist="") 

    /* TODO: If artist is undefined, then set to empty string */

    /* TODO: Call displayResults for appropriate /artist/ URL */

    displayResults ("/artist/" + artist)
}

function displayAlbum(album) {
    /* TODO: Set CurrentNotebook */

    /* TODO: Set notebook-body-nav's innerHTML to empty string or some other useful information */

    /* TODO: If album is undefined, then set to empty string */

    /* TODO: Call displayResults for appropriate /album/ URL */
    CurrentNotebook= "Albums"
    if (album===undefined) {
        album="";
    }
    displayResults ("/album/" + album)
}


function displayTrack(track) {
    /* TODO: Set CurrentNotebook */

    /* TODO: Set notebook-body-nav's innerHTML to empty string or some other useful information */

    /* TODO: If album is undefined, then set to empty string */

    /* TODO: Call displayResults for appropriate /album/ URL */
    CurrentNotebook= "Tracks"
    if (track===undefined) {
        track="";
    }
    displayResults ("/track/" + track)
}


function displayPlaylist() {
    /* TODO: Set CurrentNotebook */
    CurrentNotebook= "Playlist";
    /* TODO: Set notebook-body-nav's innerHTML to empty string or some other useful information */
    var e = document.getElementById("notebook-body-contents")
    /* TODO: Set notebook-body-contents to playlist table
     *
     *	- Table should have playlist identifier.
     *	- Table should have columns for playlist index, album cover, artist, album, and track names.
     *	- Table should highlight the active song.
     *  - Table should be generated by looping through objects in PlaylistQueue.
     *
     *  - Optional: add callback so that if user clicks on song, then the song is played.
     */
     var h = '<table id="playlist" class="table table-striped"><thead><th>#</th><th></th><th>Artist</th><th>Album</th><th>Track</th></thead><tbody>';

     for (var k in PlaylistQueue) {
        var b = PlaylistQueue[k], n=parseInt(k) + 1;
        h += k == PlaylistIndex ? '<tr class="playlist-active">' : '<tr>' 
	h += '<td>' + n + '</td><td><img src="' + b.albumImage + '"class ="img-rounded playlist-image"/></td>'
	h += '<td>' + b.artistName + '</td><td>' + b.albumName + '</td><td>' + b.trackName + '</td></tr>'
     }
     h += '</tbody></table>'
     e.innerHTML = h
}

/* Render functions */

function renderGallery(data, prefix) {
    /* TODO: Set notebook-body-contents to gallery of thumbnails
     *
     *	- Similar to gallery.html template
     *	- Each item should have an anchor in like this:
     *
     *	    <a href="#" onclick="displayPREFIX(ID)" class="thumbnail text-center">

     *	  Where PREFIX is the prefix given and the ID is the id from the
     *	  current data item.  For instance if PREFIX is Track and id is 1, then
     *	  the anchor would be:
     *
     *	    <a href="#" onclick="displayTrack(1)" class="thumbnail text-center">
     */
    var doc = document.getElementById("notebook-body-contents");
    html='<div class="row">';
    var n=1;
    for (var item in data) {
        var info=data[item]
	if (item%4==0 && item>0) {
	    html+='</div><div class="row">';
	}
	
	html+='<div class="col-xs-3"><a href="#" onclick="display'+prefix+'('+info[0]+')" class="thumbnail text-center"><img src="'+info[2]+'"><div class="caption"><h4>'+info[1]+'</h4></div></a></div>'
	
    }
    html+='</div>';

    doc.innerHTML=html;

}

function renderAlbum(data) {
    /* TODO: Set notebook-body-contents to table of tracks
     *
     *	- Each track should have an icon anchor for adding the song to playlist
     *	or for playing the song.
     *
     */
    var doc = document.getElementById("notebook-body-contents");
    html='<table class="table table-striped"><thead><th>Number</th><th>Name</th><th>Actions</th></thead><tbody>'
    for (var item in data) {
        var info=data[item];
	html+='<tr><td>'+info[1]+'</td><td><a href="#" onclick="displayTrack('+info[0]+')">'+info[2]+'</a></td><td><a href="#" onclick="addSong('+info[0]+')"><i class="fa fa-plus"></i></a><a href="#" onclick="playSong('+info[0]+')"><i class="fa fa-play"></i></a></td></tr>'
    }

    html+='</tbody></table>'

    doc.innerHTML=html;
    
}

function renderTrack(data) {
    /* TODO: Set notebook-body-contents to display of track information
     *
     *	- Clicking on the artist name should call displayArtist
     *	- Clicking on the album name should call displayAlbum
     *	- There should be icons for adding song to playlist or for playing the song.
     *
     */
    var doc = document.getElementById("notebook-body-contents");

    html='<div class="row"><div class="col-sm-3"<a href="#" onclick="playSong('+
data[0]+')" class="thumbnail text-center"><img class="img-responsive" src="'+data[7]+'"></a></div><div class="col-sm-6"><dl><dt>Track ID</dt><dd>'+data[0]+'</dd><dt>Artist</dt><dd><a href="#" onclick="displayArtist('+data[1]+')">'+data[2]+'</a></dd><dt>Album</dt><dd><a href="#" onclick="displayAlbum('+data[3]+')">'+data[4]+'</a></dd><dt>Track Number</dt><dd>'+data[5]+'</dd><dt>Track Name</dt><dd>'+data[6]+'</dd></dl><a href="#" onclick="addSong('+data[0]+')"><i class="fa fa-plus"></i></a><a href="#" onclick="playSong('+data[0]+')"><i class="fa fa-play"></i></a></div></div>'

    //icons for add and play song
    doc.innerHTML=html;

}

/* Update functions */

function updateSearchResults() {
    /* TODO: Construct search URL from query and table values and call
     * displayResults
     */
     var e= document.getElementById("query").value
     var t= document.getElementById("table").value
     var h= "/search?query=" + e + "&table=" + t;
     displayResults(h)
}


function updateSongInformation() {
    /* TODO: Get current song from PlaylistQueue and update the following elements:
     *
     *	1. trackName.innerHTML
     *	2. albumImage.innerHTML
     *	3. artistName.innerHTML
     *	4. image.src
     *	5. player.src
     *
     *	If CurrentNotebook is Playlist, then call displayPlaylist.
     */

    var currsong=PlaylistQueue[PlaylistIndex];

    trackName=document.getElementById("trackName");
    albumImage=document.getElementById("albumImage");
    artistName=document.getElementById("artistName");
    albumName=document.getElementById("albumName");
    play=document.getElementById("player");

    trackName.innerHTML = currsong.trackName;
    albumName.innerHTML = "<em>" + currsong.albumName + "</em>";
    artistName.innerHTML = "<small>" + currsong.artistName + "</small>";
    albumImage.src = currsong.albumImage;
    play.src = currsong.songURL;
    

    if (CurrentNotebook=="Playlist") {
        displayPlaylist();
    }

}

/* Audio controls */

function addSong(trackId, select) {
    var url = "/song/" + trackId;

    requestJSON(url, function(data) {
	var song = data['song'];
	PlaylistQueue.push(song);

	if (select !== undefined && select) {
	    selectSong(PlaylistIndex + 1);
	}
    });
}

function prevSong() {
    if (PlaylistIndex < 0 || PlaylistQueue.length == 0) {
    	return;
    }

    selectSong((PlaylistIndex + PlaylistQueue.length - 1) % PlaylistQueue.length);
}

function nextSong() {
    if (PlaylistIndex < 0 || PlaylistQueue.length == 0) {
    	return;
    }

    selectSong((PlaylistIndex + 1) % PlaylistQueue.length);
}

function selectSong(index) {
    PlaylistIndex = index;
    updateSongInformation();
    playSong();
}

function playSong(trackId) {
    var player     = document.getElementById('player');
    var playButton = document.getElementById('playButton');

    if (trackId !== undefined && trackId != '') {
    	return addSong(trackId, true);
    }

    if (PlaylistIndex < 0 && PlaylistQueue.length) {
    	return selectSong(0);
    }

    if (player.src === undefined || player.src == '') {
    	return;
    }

    if (player.ended || player.paused) {
    	playButton.innerHTML = '<i class="fa fa-pause"></i>';
	player.play();
    } else {
    	playButton.innerHTML = '<i class="fa fa-play"></i>';
	player.pause();
    }
}

function togglePlaySong() {
    playSong('');
}

function endSong() {
    document.getElementById('playButton').innerHTML = '<i class="fa fa-play"></i>';
    nextSong();
}

/* Registrations */
window.onload = function() {
    /* TODO: Register displayTab function for each tab's onclick callback */
    for (var h= document.getElementsByClassName("nav-tabs")[0].getElementsByTagName("li"), k=0; k < h.length; k++){
        var b = h[k];
        b.onclick=displayTab
    }

    /* TODO: Register onclick callbacks for
     *
     *	- prevButton -> prevSong
     *	- playButton -> togglePlaySong
     *	- nextButton -> nextSong
     */
     document.getElementById("prevButton").onclick = prevSong
     document.getElementById("playButton").onclick = togglePlaySong
     document.getElementById("nextButton").onclick = nextSong

    /* TODO: Register endSong function for player's onended callback */
    document.getElementById("player").onended = endSong

    /* TODO: Display search results */
    displaySearch()

}
